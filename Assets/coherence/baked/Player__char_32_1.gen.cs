// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
	using Coherence.ProtocolDef;
	using Coherence.Serializer;
	using Coherence.Brook;
	using UnityEngine;

	public struct Player__char_32_1 : IEntityInput
	{
		public uint GetComponentType() => Definition.InternalPlayer__char_32_1;

		public bool W;
		public bool A;
		public bool S;
		public bool D;
		public bool Q;
		public bool E;
		public Vector2 mouse;
		private readonly bool isRemoteInput;

		public Player__char_32_1
		(
			bool dataW,
			bool dataA,
			bool dataS,
			bool dataD,
			bool dataQ,
			bool dataE,
			Vector2 datamouse,
			bool isRemoteInput
		)
		{
			W = dataW;
			A = dataA;
			S = dataS;
			D = dataD;
			Q = dataQ;
			E = dataE;
			mouse = datamouse;
			this.isRemoteInput = isRemoteInput;
		}

		public override string ToString()
		{
			return isRemoteInput
				? $"{nameof(W)}: {W}, {nameof(A)}: {A}, {nameof(S)}: {S}, {nameof(D)}: {D}, {nameof(Q)}: {Q}, {nameof(E)}: {E}, {nameof(mouse)}: {mouse}"
				: $"{nameof(W)}: {W}, {nameof(A)}: {A}, {nameof(S)}: {S}, {nameof(D)}: {D}, {nameof(Q)}: {Q}, {nameof(E)}: {E}, {nameof(mouse)}: {mouse}";
		}

		public static void Serialize(Player__char_32_1 inputData, IOutProtocolBitStream bitStream)
		{
			bitStream.WriteBool(inputData.W);
			bitStream.WriteBool(inputData.A);
			bitStream.WriteBool(inputData.S);
			bitStream.WriteBool(inputData.D);
			bitStream.WriteBool(inputData.Q);
			bitStream.WriteBool(inputData.E);
			var converted_mouse = inputData.mouse.ToCoreVector2();
			bitStream.WriteVector2(converted_mouse, FloatMeta.NoCompression());
		}

		public static Player__char_32_1 Deserialize(IInProtocolBitStream bitStream)
		{
			var dataW = bitStream.ReadBool();
			var dataA = bitStream.ReadBool();
			var dataS = bitStream.ReadBool();
			var dataD = bitStream.ReadBool();
			var dataQ = bitStream.ReadBool();
			var dataE = bitStream.ReadBool();
			var converted_mouse = bitStream.ReadVector2(FloatMeta.NoCompression());
			var datamouse = converted_mouse.ToUnityVector2();

			return new Player__char_32_1
			(
				dataW,
				dataA,
				dataS,
				dataD,
				dataQ,
				dataE,
				datamouse,
				true
			);
		}
	}
}
